plugins {
    id "world.library"
}

apply plugin: BuildReportsPlugin

dependencies {
    implementation project(":world-domain-api")

    implementation(libs.codion.framework.json.domain)
    implementation(libs.codion.swing.framework.ui)
    implementation(libs.codion.plugin.jasperreports)

    implementation(libs.json)
    implementation(libs.jfreechart)
    implementation(libs.flatlaf)
    implementation(libs.flatlaf.intellij.themes)
    implementation(libs.ikonli.foundation)

    implementation(libs.jxmapviewer2) {
        transitive = false
    }

    implementation(libs.jasperreports) {
        transitive = false
    }

    runtimeOnly(libs.codion.plugin.logback.proxy)

    runtimeOnly(libs.commons.logging)
    runtimeOnly(libs.commons.digester) {
        transitive = false
    }
    runtimeOnly(libs.commons.collections4)
    runtimeOnly(libs.commons.beanutils) {
        transitive = false
    }
    runtimeOnly(libs.jdt.core.compiler)

    testImplementation project(":world-domain")
    testImplementation(libs.codion.framework.db.local)
    testRuntimeOnly(libs.codion.dbms.h2database)
    testRuntimeOnly(libs.h2)
    testImplementation(libs.junit.api)
    testRuntimeOnly(libs.junit.engine)
}

buildReports {
    sourceDir = file("src/main/reports")
    targetDir = file(sourceSets.main.output.resourcesDir.toString() + "/is/codion/framework/demos/world/model")
}

test {
    useJUnitPlatform()
    systemProperty "codion.test.user", "scott:tiger"
    systemProperty "codion.db.url", "jdbc:h2:mem:h2db"
    systemProperty "codion.db.initScripts", "classpath:create_schema.sql"
}

tasks.register("writeVersion") {
    group "build"
    def versionFile = file(sourceSets.main.output.resourcesDir.getAbsolutePath() + "/version.properties")
    inputs.property("version", project.version)
    outputs.file(versionFile)
    outputs.upToDateWhen { false }

    doLast {
        def versionProperties = new Properties()
        versionProperties.put("version", project.version)
        versionProperties.store(versionFile.newWriter(), null)
    }
}

classes.dependsOn writeVersion