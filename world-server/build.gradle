plugins {
    id "world.server"
}

dependencies {
    runtimeOnly(libs.codion.framework.server)
    runtimeOnly(libs.codion.framework.servlet)
    runtimeOnly(libs.codion.plugin.hikari.pool)
    runtimeOnly(libs.codion.dbms.h2database)
    runtimeOnly(libs.h2)

    runtimeOnly project(":world-domain")

    //logging library, skipping the email stuff
    runtimeOnly(libs.codion.plugin.logback.proxy) {
        exclude group: "com.sun.mail", module: "javax.mail"
    }
}

applicationDefaultJvmArgs = [
        "-Xmx256m",
        "-Dlogback.configurationFile=logback.xml",
        //add-reads for accessing default methods for Entity types
        "--add-reads", "is.codion.framework.domain=is.codion.framework.demos.world.domain.api",
        //RMI configuration
        "-Djava.rmi.server.hostname=${serverHost}",
        "-Dcodion.server.registryPort=${serverRegistryPort}",
        "-Djava.rmi.server.randomIDs=true",
        "-Djava.rmi.server.useCodebaseOnly=true",
        //The serialization whitelist
        "-Dcodion.server.serializationFilterWhitelist=classpath:serialization-whitelist.txt",
        //SSL configuration
        "-Dcodion.server.classpathKeyStore=keystore.jks",
        "-Djavax.net.ssl.keyStorePassword=crappypass",
        //The port used by clients
        "-Dcodion.server.port=${serverPort}",
        //The servlet server
        "-Dcodion.server.auxiliaryServerFactoryClassNames=is.codion.framework.servlet.EntityServiceFactory",
        "-Dcodion.server.http.secure=false",
        "-Dcodion.server.http.port=${serverHttpPort}",
        //The port for the admin interface, used by the server monitor
        "-Dcodion.server.admin.port=${serverAdminPort}",
        //The admin user credentials, used by the server monitor application
        "-Dcodion.server.admin.user=scott:tiger",
        //Database configuration
        "-Dcodion.db.url=jdbc:h2:mem:h2db",
        "-Dcodion.db.initScripts=classpath:create_schema.sql",
        //A connection pool based on this user is created on startup
        "-Dcodion.server.connectionPoolUsers=scott:tiger",
        //Client logging disabled by default
        "-Dcodion.server.clientLogging=false"
]

application {
    mainModule.set("is.codion.framework.server")
    mainClass.set("is.codion.framework.server.EntityServer")
}

jlink {
    imageName.set(project.name)
    moduleName.set(application.mainModule)
    options = ["--strip-debug", "--compress", "2", "--no-header-files", "--no-man-pages", "--ignore-signing-information",
               "--add-modules", "is.codion.framework.db.local,is.codion.dbms.h2database,is.codion.plugin.hikari.pool," +
                       "is.codion.plugin.logback.proxy,is.codion.framework.demos.world.domain,is.codion.framework.servlet"]

    addExtraDependencies("slf4j-api", "jackson-core", "jackson-databind", "jackson-annotation")

    mergedModule {
        excludeRequires "jetty.servlet.api"
    }

    forceMerge "kotlin"

    launcher {
        jvmArgs = applicationDefaultJvmArgs
    }

    jpackage {
        imageName = "World-Server"
        appVersion = project.version.replace("-SNAPSHOT", "")
        if (org.gradle.internal.os.OperatingSystem.current().linux) {
            installerType = "deb"
            icon = "../world.png"
            installerOptions = [
                    "--resource-dir", "build/jpackage/World-Server/lib",
                    "--linux-shortcut"
            ]
        }
        if (org.gradle.internal.os.OperatingSystem.current().windows) {
            installerType = "msi"
            icon = "../world.ico"
            imageOptions += ["--win-console"]
            installerOptions = [
                    "--win-menu",
                    "--win-shortcut"
            ]
        }
    }
}

prepareMergedJarsDir.doLast {
    copy {
        from "src/main/resources"
        into "$jlinkBasePath/mergedjars"
    }
}